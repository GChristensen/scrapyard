--- original/jstree.js	2020-05-11 16:23:33.796772000 +0400
+++ jstree.js	2021-02-06 21:56:12.262000000 +0400
@@ -75,7 +75,7 @@
 		idregex : /[\\:&!^|()\[\]<>@*'+~#";.,=\- \/${}%?`]/g,
 		root : '#'
 	};
-	
+
 	/**
 	 * creates a jstree instance
 	 * @name $.jstree.create(el [, options])
@@ -593,7 +593,7 @@
 					return this.nodeType === 3 && (!this.nodeValue || /^\s+$/.test(this.nodeValue));
 				})
 				.remove();
-			this.element.html("<"+"ul class='jstree-container-ul jstree-children' role='group'><"+"li id='j"+this._id+"_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='tree-item'><i class='jstree-icon jstree-ocl'></i><"+"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>" + this.get_string("Loading ...") + "</a></li></ul>");
+			this.element.html("<"+"ul class='jstree-container-ul jstree-children' role='group'><"+"li id='j"+this._id+"_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='tree-item'><i class='jstree-icon jstree-ocl'></i><"+"a class='jstree-anchor'><i class='jstree-icon jstree-themeicon-hidden'></i>" + this.get_string("Loading ...") + "</a></li></ul>");
 			this.element.attr('aria-activedescendant','j' + this._id + '_loading');
 			this._data.core.li_height = this.get_container_ul().children("li").first().outerHeight() || 24;
 			this._data.core.node = this._create_prototype_node();
@@ -641,7 +641,7 @@
 			_node.appendChild(_temp1);
 			_temp1 = document.createElement('A');
 			_temp1.className = 'jstree-anchor';
-			_temp1.setAttribute('href','#');
+//			_temp1.setAttribute('href','#');
 			_temp1.setAttribute('tabindex','-1');
 			_temp2 = document.createElement('I');
 			_temp2.className = 'jstree-icon jstree-themeicon';
@@ -1629,6 +1629,7 @@
 									id			: tid,
 									text		: d.text || '',
 									icon		: d.icon !== undefined ? d.icon : true,
+                                    fallbackIcon: d.fallbackIcon,
 									parent		: p,
 									parents		: ps,
 									children	: d.children || [],
@@ -1636,7 +1637,7 @@
 									data		: d.data,
 									state		: { },
 									li_attr		: { id : false },
-									a_attr		: { href : '#' },
+									a_attr		: { /*href : '#'*/ },
 									original	: false
 								};
 							for(i in df) {
@@ -1726,7 +1727,7 @@
 								data		: null,
 								state		: { },
 								li_attr		: { id : false },
-								a_attr		: { href : '#' },
+								a_attr		: { /*href : '#'*/ },
 								original	: false
 							};
 							for(i in df) {
@@ -1823,8 +1824,9 @@
 						// 2) populate children (foreach)
 						for(i = 0, j = dat.length; i < j; i++) {
 							if (!m[dat[i].parent.toString()]) {
-								this._data.core.last_error = { 'error' : 'parse', 'plugin' : 'core', 'id' : 'core_07', 'reason' : 'Node with invalid parent', 'data' : JSON.stringify({ 'id' : dat[i].id.toString(), 'parent' : dat[i].parent.toString() }) };
-								this.settings.core.error.call(this, this._data.core.last_error);
+                                //console.log("Scrapyard node with invalid parent: " + dat[i].id);
+								//this._data.core.last_error = { 'error' : 'parse', 'plugin' : 'core', 'id' : 'core_07', 'reason' : 'Node with invalid parent', 'data' : JSON.stringify({ 'id' : dat[i].id.toString(), 'parent' : dat[i].parent.toString() }) };
+								//this.settings.core.error.call(this, this._data.core.last_error);
 								continue;
 							}
 
@@ -2012,7 +2014,7 @@
 					data		: null,
 					state		: { },
 					li_attr		: { id : false },
-					a_attr		: { href : '#' },
+					a_attr		: { /*href : '#'*/ },
 					original	: false
 				}, i, tmp, tid;
 			for(i in this._model.default_state) {
@@ -2127,7 +2129,7 @@
 					data		: d.data,
 					state		: { },
 					li_attr		: { id : false },
-					a_attr		: { href : '#' },
+					a_attr		: { /*href : '#'*/ },
 					original	: false
 				};
 			for(i in df) {
@@ -2226,7 +2228,7 @@
 				data		: null,
 				state		: { },
 				li_attr		: { id : false },
-				a_attr		: { href : '#' },
+				a_attr		: { /*href : '#'*/ },
 				original	: false
 			};
 			for(i in df) {
@@ -2538,14 +2540,17 @@
 				if(obj.icon === false) {
 					node.childNodes[1].childNodes[0].className += ' jstree-themeicon-hidden';
 				}
-				else if(obj.icon.indexOf('/') === -1 && obj.icon.indexOf('.') === -1) {
+				else if(obj.icon.indexOf('/') === -1 && obj.icon.indexOf('.') === -1 && !obj.icon.startsWith("var(")) {
 					node.childNodes[1].childNodes[0].className += ' ' + obj.icon + ' jstree-themeicon-custom';
 				}
 				else {
-					node.childNodes[1].childNodes[0].style.backgroundImage = 'url("'+obj.icon+'")';
+    				node.childNodes[1].childNodes[0].style.backgroundImage = (obj.icon.startsWith("var(")? obj.icon: 'url("' + obj.icon + '")') + (obj.fallbackIcon? ', ' + obj.fallbackIcon: '');
 					node.childNodes[1].childNodes[0].style.backgroundPosition = 'center center';
-					node.childNodes[1].childNodes[0].style.backgroundSize = 'auto';
+					node.childNodes[1].childNodes[0].style.backgroundSize = '16px 16px';
 					node.childNodes[1].childNodes[0].className += ' jstree-themeicon-custom';
+
+                    if (this.__icon_check_hook)
+                        this.__icon_check_hook(node.childNodes[1], obj);
 				}
 			}
 
@@ -3584,7 +3589,7 @@
 
 			var c = this.get_container_ul()[0].className;
 			if(!skip_loading) {
-				this.element.html("<"+"ul class='"+c+"' role='group'><"+"li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='treeitem' id='j"+this._id+"_loading'><i class='jstree-icon jstree-ocl'></i><"+"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>" + this.get_string("Loading ...") + "</a></li></ul>");
+				this.element.html("<"+"ul class='"+c+"' role='group'><"+"li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='treeitem' id='j"+this._id+"_loading'><i class='jstree-icon jstree-ocl'></i><"+"a class='jstree-anchor'><i class='jstree-icon jstree-themeicon-hidden'></i>" + this.get_string("Loading ...") + "</a></li></ul>");
 				this.element.attr('aria-activedescendant','j'+this._id+'_loading');
 			}
 			this.load_node($.jstree.root, function (o, s) {
@@ -4802,14 +4807,17 @@
 				dom.removeClass('jstree-themeicon-custom ' + old).css("background","").removeAttr("rel");
 				if(old === false) { this.show_icon(obj); }
 			}
-			else if(icon.indexOf("/") === -1 && icon.indexOf(".") === -1) {
+			else if(icon.indexOf("/") === -1 && icon.indexOf(".") === -1 && !obj.icon.startsWith("var(")) {
 				dom.removeClass(old).css("background","");
 				dom.addClass(icon + ' jstree-themeicon-custom').attr("rel",icon);
 				if(old === false) { this.show_icon(obj); }
 			}
 			else {
 				dom.removeClass(old).css("background","");
-				dom.addClass('jstree-themeicon-custom').css("background", "url('" + icon + "') center center no-repeat").attr("rel",icon);
+				dom.addClass('jstree-themeicon-custom').css("background",
+                    (icon.startsWith("var(")? icon: 'url("' + icon + '")') + " center center no-repeat")
+                    .css("background-size", "16px 16px")
+                    .attr("rel",icon);
 				if(old === false) { this.show_icon(obj); }
 			}
 			return true;
@@ -5379,9 +5387,9 @@
 			this.element.find('.jstree-closed').not(':has(.jstree-children)')
 				.each(function () {
 					var tmp = tt.get_node(this), tmp2;
-					
+
 					if(!tmp) { return; }
-					
+
 					if(!tmp.state.loaded) {
 						if(tmp.original && tmp.original.state && tmp.original.state.undetermined && tmp.original.state.undetermined === true) {
 							if(o[tmp.id] === undefined && tmp.id !== $.jstree.root) {
@@ -5765,7 +5773,7 @@
 				this.trigger('uncheck_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });
 			}
 		};
-		
+
 		/**
 		 * checks all nodes in the tree (only if tie_selection in checkbox settings is false, otherwise select_all will be called internally)
 		 * @name check_all()
@@ -5993,7 +6001,7 @@
 		 * * `_disabled` - a boolean indicating if this action should be disabled
 		 * * `label` - a string - the name of the action (could be a function returning a string)
 		 * * `title` - a string - an optional tooltip for the item
-		 * * `action` - a function to be executed if this item is chosen, the function will receive 
+		 * * `action` - a function to be executed if this item is chosen, the function will receive
 		 * * `icon` - a string, can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class
 		 * * `shortcut` - keyCode which will trigger the action if the menu is open (for example `113` for rename, which equals F2)
 		 * * `shortcut_label` - shortcut label (like for example `F2` for rename)
@@ -7279,7 +7287,7 @@
 	 *		"id1" : [{ "text" : "Child of ID1", "id" : "c1" }, { "text" : "Another child of ID1", "id" : "c2" }],
 	 *		"id2" : [{ "text" : "Child of ID2", "id" : "c3" }]
 	 *	}
-	 * 
+	 *
 	 * @name $.jstree.defaults.massload
 	 * @plugin massload
 	 */
@@ -8602,4 +8610,4 @@
 		} catch (ignore) { }
 	}
 
-}));
\ No newline at end of file
+}));
